#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# 커밋 컨벤션
# 0. 검사 예외 조건 (자동 생성, 최초 커밋)
# - Merge branch*, Merge pull request*, initial*
# 1. 접두사의 글자는 소문자
# 2. 맨 마지막 글자 '.' 마침표 금지
# 3. 커밋 접두사 (규칙: '접두사' + '콜론' + ' ')
# - init: 프로젝트 생성
# - add: 기능과 상관 없는 폴더나 파일 추가
# - test: 기능 테스트
# - feat: 새로운 기능 추가
# - fix: 버그 수정
# - docs: 문서의 수정
# - style: (코드의 수정 없이) 스타일(style)만 변경(들여쓰기 같은 포맷이나 세미콜론을 빼먹은 경우)
# - refactor: 코드를 리펙토링
# - chore: 기타 변경사항 (빌드 스크립트 수정, assets image, 패키지 매니저 등)
# - test: Test 관련한 코드의 추가, 수정
# - design: CSS 등 사용자 UI 디자인 변경
# - comment: 필요한 주석 추가 및 변경
# - rename: 파일 혹은 폴더명을 수정하거나 옮기는 작업만인 경우
# - remove: 파일을 삭제하는 작업만 수행한 경우
# - !HOTFIX: 급하게 치명적인 버그를 고쳐야하는 경우
# 5. '!': 급한 변경 사항인 경우에 추가 (접두사, () 뒤 / 콜론 이전)
# 6. (): 추가 요약 정보가 필요할 경우 (접두사 뒤 / !, 콜론 이전)

COMMIT_MSG_FILE=$1
FIRST_LINE=`head -n1 ${COMMIT_MSG_FILE}`
RES="needCheck" # needCheck, auto, initial, lintError*, clear

if [[ $FIRST_LINE =~ ^(Merge branch) ]] ||
   [[ $FIRST_LINE =~ ^(Merge pull request) ]]; then
  RES="auto"
fi

if [[ $FIRST_LINE =~ ^(initial) ]]; then
  RES="initial"
fi

if [ $RES == "needCheck" ]; then
  if [[ $FIRST_LINE =~ (\.)$ ]]; then
    RES="lintError1"
  fi

  if 
     [[ ! $FIRST_LINE =~ ^(init(\(.*\))?!?: ) ]] &&
     [[ ! $FIRST_LINE =~ ^(feat(\(.*\))?!?: ) ]] &&
     [[ ! $FIRST_LINE =~ ^(add(\(.*\))?!?: ) ]] &&
     [[ ! $FIRST_LINE =~ ^(test(\(.*\))?!?: ) ]] &&
     [[ ! $FIRST_LINE =~ ^(fix(\(.*\))?!?: ) ]] &&
     [[ ! $FIRST_LINE =~ ^(docs(\(.*\))?!?: ) ]] &&
     [[ ! $FIRST_LINE =~ ^(style(\(.*\))?!?: ) ]] &&
     [[ ! $FIRST_LINE =~ ^(refactor(\(.*\))?!?: ) ]] &&
     [[ ! $FIRST_LINE =~ ^(chore(\(.*\))?!?: ) ]] &&
     [[ ! $FIRST_LINE =~ ^(test(\(.*\))?!?: ) ]] &&
     [[ ! $FIRST_LINE =~ ^(design(\(.*\))?!?: ) ]] &&
     [[ ! $FIRST_LINE =~ ^(comment(\(.*\))?!?: ) ]] &&
     [[ ! $FIRST_LINE =~ ^(rename(\(.*\))?!?: ) ]] &&
     [[ ! $FIRST_LINE =~ ^(remove(\(.*\))?!?: ) ]] &&
     [[ ! $FIRST_LINE =~ ^(!HOTFIX(\(.*\))?!?: ) ]]; then
    RES="lintError2"
  fi

  if [[ ! $RES =~ ^(lintError) ]]; then
    RES="clear"
  fi
fi

if [[ $RES =~ ^(lintError) ]]; then
  if [[ $RES == "lintError1" ]]; then
    echo "CommitLint#1: 문장 마지막의 ('.') 마침표를 제거해주세요."
  fi
  if [[ $RES == "lintError2" ]]; then
    echo "CommitLint#2: 접두사, 콜론, 띄어쓰기 형태를 확인하세요. (feat: , add:, test:,  fix: , docs: , style: , refactor: , test: , chore: )"
  fi
  exit 1
elif [[ $RES == "auto" ]]; then
  echo "Automatically generated commit message from git"
elif [[ $RES == "initial" ]]; then
  echo "Initial commit"
elif [[ $RES == "clear" ]]; then
  echo "Pass commit lint!"
fi

exit 0
